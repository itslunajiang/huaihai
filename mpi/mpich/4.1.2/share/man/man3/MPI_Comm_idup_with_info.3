.TH MPI_Comm_idup_with_info 3 "6/7/2023" " " "MPI"
.SH NAME
MPI_Comm_idup_with_info \-  nonblocking communicator duplication 
.SH SYNOPSIS
.nf
.fi
.nf
int MPI_Comm_idup_with_info(MPI_Comm comm, MPI_Info info, MPI_Comm *newcomm,
MPI_Request *request)
.fi


.SH INPUT PARAMETERS
.PD 0
.TP
.B comm 
- communicator (handle)
.PD 1
.PD 0
.TP
.B info 
- info object (handle)
.PD 1

.SH OUTPUT PARAMETERS
.PD 0
.TP
.B newcomm 
- copy of comm (handle)
.PD 1
.PD 0
.TP
.B request 
- communication request (handle)
.PD 1

.SH INFO HINTS
.PD 0
.TP
.B mpi_assert_no_any_tag 
- boolean, default = false.
If set to true, user promises that MPI_ANY_TAG will not be used with the
communicator. This potentially allows MPICH to treat messages with different
tags independent and seek to improve performance, e.g. by employ multiple
network context.
.PD 1
.PD 0
.TP
.B mpi_assert_no_any_source 
- boolean, default = false.
If set to true, user promises that MPI_ANY_SOURCE will not be used with the
communicator. This potentially allows MPICH to treat messages send to different
ranks or receive from different ranks independent and seek to improve
performance, e.g. by employ multiple network context.
.PD 1
.PD 0
.TP
.B mpi_assert_exact_length 
- boolean, default = false.
If set to true, user promises that the lengths of messages received by the
process will always equal to the size of the corresponding receive buffers.
.PD 1
.PD 0
.TP
.B mpi_assert_allow_overtaking 
- boolean, default = false.
If set to true, user asserts that send operations are not required to be matched
at the receiver in the order in which the send operations were performed by the
sender, and receive operations are not required to be matched in the order in
which they were performed by the receivers.
.PD 1

.SH THREAD AND INTERRUPT SAFETY

This routine is thread-safe.  This means that this routine may be
safely used by multiple threads without the need for any user-provided
thread locks.  However, the routine is not interrupt safe.  Typically,
this is due to the use of memory allocation routines such as 
.I malloc
or other non-MPICH runtime routines that are themselves not interrupt-safe.

.SH NOTES FOR FORTRAN
All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
) have
an additional argument 
.I ierr
at the end of the argument list.  
.I ierr
is an integer and has the same meaning as the return value of the routine
in C.  In Fortran, MPI routines are subroutines, and are invoked with the
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type 
.I INTEGER
in Fortran.

.SH ERRORS

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error value;
C routines as the value of the function and Fortran routines in the last
argument.  Before the value is returned, the current MPI error handler is
called.  By default, this error handler aborts the MPI job.  The error handler
may be changed with 
.I MPI_Comm_set_errhandler
(for communicators),
.I MPI_File_set_errhandler
(for files), and 
.I MPI_Win_set_errhandler
(for
RMA windows).  The MPI-1 routine 
.I MPI_Errhandler_set
may be used but
its use is deprecated.  The predefined error handler
.I MPI_ERRORS_RETURN
may be used to cause error values to be returned.
Note that MPI does 
.B not
guarantee that an MPI program can continue past
an error; however, MPI implementations will attempt to continue whenever
possible.

.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.PD 0
.TP
.B MPI_ERR_ARG 
- Invalid argument.  Some argument is invalid and is not
identified by a specific error class (e.g., 
.I MPI_ERR_RANK
).
.PD 1
.PD 0
.TP
.B MPI_ERR_COMM 
- Invalid communicator.  A common error is to use a null
communicator in a call (not even allowed in 
.I MPI_Comm_rank
).
.PD 1
.PD 0
.TP
.B MPI_ERR_INFO 
- Invalid Info 
.PD 1
.PD 0
.TP
.B MPI_ERR_OTHER 
- Other error; use 
.I MPI_Error_string
to get more information
about this error code. 
.PD 1

